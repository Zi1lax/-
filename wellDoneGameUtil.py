import os
from PySide6 import QtWidgets, QtCore, QtGui

SOURCE_PATH = os.path.join(os.path.dirname(__file__), "source_image")

# ------------------- ‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏¥‡∏ö‡∏Ç‡∏≠‡∏á -------------------
def try_pick_item(game_widget, threshold=50):
    if getattr(game_widget, "has_item", False):
        print("‡πÄ‡∏ä‡∏ü‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß üß∫")
        return

    chef_geom = game_widget.chef.geometry()
    chef_center = QtCore.QPoint(
        chef_geom.x() + chef_geom.width() // 2,
        chef_geom.y() + chef_geom.height() // 2
    )

    found = False

    # 1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ingredients
    for ing in getattr(game_widget, "ingredients", []):
        name = ing["name"]
        ing_widget = ing["widget"]
        ing_geom = ing_widget.geometry()
        ing_center = QtCore.QPoint(
            ing_geom.x() + ing_geom.width() // 2,
            ing_geom.y() + ing_geom.height() // 2
        )
        dx = chef_center.x() - ing_center.x()
        dy = chef_center.y() - ing_center.y()
        distance = (dx**2 + dy**2) ** 0.5
        if distance <= threshold:
            game_widget.has_item = True
            game_widget.current_item = name
            print(f"‚úÖ ‡∏´‡∏¢‡∏¥‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö: {name}")
            show_pick_feedback(game_widget, name)
            found = True
            break

    # 2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö placed_items (‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô)
    if not found and hasattr(game_widget, "placed_items"):
        for item_label in list(game_widget.placed_items):  # ‡πÉ‡∏ä‡πâ list() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á loop
            name = getattr(item_label, "item_name", None)
            if not name:
                continue

            item_geom = item_label.geometry()
            item_center = QtCore.QPoint(
                item_geom.x() + item_geom.width() // 2,
                item_geom.y() + item_geom.height() // 2
            )
            dx = chef_center.x() - item_center.x()
            dy = chef_center.y() - item_center.y()
            distance = (dx**2 + dy**2) ** 0.5

            if distance <= threshold:
                game_widget.has_item = True
                game_widget.current_item = name
                print(f"‚úÖ ‡∏´‡∏¢‡∏¥‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô: {name}")

                show_pick_feedback(game_widget, name)

                # ‡πÄ‡∏≠‡∏≤ icon ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏≠‡∏≠‡∏Å
                item_label.deleteLater()
                game_widget.placed_items.remove(item_label)
                found = True
                break

    # 3Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö chopping_board_icons (‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ö‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á)
    if not found and hasattr(game_widget, "chopping_board_icons"):
        for icon_label in list(game_widget.chopping_board_icons):
            name = icon_label.property("item_name") or getattr(icon_label, "item_name", None)
            if not name:
                continue

            icon_geom = icon_label.geometry()
            icon_center = QtCore.QPoint(
                icon_geom.x() + icon_geom.width() // 2,
                icon_geom.y() + icon_geom.height() // 2
            )
            dx = chef_center.x() - icon_center.x()
            dy = chef_center.y() - icon_center.y()
            distance = (dx**2 + dy**2) ** 0.5

            if distance <= threshold:
                game_widget.has_item = True
                game_widget.current_item = name
                print(f"üî™ ‡∏´‡∏¢‡∏¥‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á: {name}")

                show_pick_feedback(game_widget, name)

                # ‡πÄ‡∏≠‡∏≤ icon ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ö‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á‡∏≠‡∏≠‡∏Å
                try:
                    game_widget.chopping_board_icons.remove(icon_label)
                except ValueError:
                    pass
                icon_label.deleteLater()
                found = True
                break

    if not found:
        print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏î ‡πÜ")

# ------------------- icon ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏ä‡∏ü -------------------
def show_pick_feedback(game_widget, item_name):
    pix_path = os.path.join(SOURCE_PATH, "image", f"{item_name}_icon.png")
    pix = QtGui.QPixmap(pix_path)
    if pix.isNull():
        return

    if getattr(game_widget, "held_icon", None):
        game_widget.held_icon.deleteLater()
        game_widget.held_icon = None

    icon_label = QtWidgets.QLabel(game_widget)
    icon_label.setPixmap(pix)
    icon_label.setScaledContents(True)
    icon_label.resize(40, 40)

    icon_label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
    icon_label.setStyleSheet("background: transparent;")

    icon_label.show()
    game_widget.held_icon = icon_label

    update_held_icon_position(game_widget)

def update_held_icon_position(game_widget):
    if getattr(game_widget, "held_icon", None):
        drop_x = game_widget.chef.x() + (game_widget.chef.width() - 40) // 2
        drop_y = game_widget.chef.y() - 40 - 5
        game_widget.held_icon.move(drop_x, drop_y)

# ------------------- ‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á -------------------
def drop_item(game_widget):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏∑‡∏≠‡πÄ‡∏ä‡∏ü‡∏•‡∏á‡πÉ‡∏ô‡∏à‡∏∏‡∏î‡∏ï‡πà‡∏≤‡∏á ‡πÜ (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á, ‡∏´‡∏°‡πâ‡∏≠, ‡∏û‡∏∑‡πâ‡∏ô, ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞)"""
    if not getattr(game_widget, "has_item", False):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠")
        return

    item_name = game_widget.current_item

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ ‚Üí ‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡∏≠‡∏á
    if is_near_trash(game_widget):
        try_throw_item_to_trash(game_widget)
        return

    # --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ object ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
    if not hasattr(game_widget, "chef"):
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ chef ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°")
        return

    # --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ß‡∏≤‡∏á ---
    drop_x = game_widget.chef.x() + (game_widget.chef.width() - 40) // 2
    drop_y = game_widget.chef.y() + game_widget.chef.height() - 10

    # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á QLabel ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏≠‡∏á ---
    item_label = QtWidgets.QLabel(game_widget)
    pix_path = os.path.join(SOURCE_PATH, "image", f"{item_name}_icon.png")
    if not os.path.exists(pix_path):
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û: {pix_path}")
        return

    pix = QtGui.QPixmap(pix_path)
    item_label.setPixmap(pix)
    item_label.setScaledContents(True)
    item_label.resize(40, 40)
    item_label.move(drop_x, drop_y)
    item_label.setAttribute(QtCore.Qt.WA_TranslucentBackground)
    item_label.setStyleSheet("background: transparent;")
    item_label.show()

    # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô attribute ‡πÅ‡∏•‡∏∞ Qt property ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
    try:
        item_label.item_name = item_name
    except Exception:
        pass
    try:
        item_label.setProperty("item_name", item_name)
    except Exception:
        pass

    # --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ä‡∏ü ---
    chef_center = QtCore.QPoint(
        game_widget.chef.x() + game_widget.chef.width() // 2,
        game_widget.chef.y() + game_widget.chef.height() // 2
    )

    placed = False  # flag ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ß‡∏≤‡∏á‡∏ï‡∏£‡∏á‡πÑ‡∏´‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á

    # ü™µ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á (chopping board)
    if hasattr(game_widget, "chopping_board"):
        board_geom = game_widget.chopping_board.geometry()
        board_center = QtCore.QPoint(
            board_geom.x() + board_geom.width() // 2,
            board_geom.y() + board_geom.height() // 2
        )
        dx = chef_center.x() - board_center.x()
        dy = chef_center.y() - board_center.y()
        distance_board = (dx ** 2 + dy ** 2) ** 0.5

        if distance_board <= 50:
            if not hasattr(game_widget, "chopping_board_icons"):
                game_widget.chopping_board_icons = []
            # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ process_space_action ‡∏´‡∏≤‡πÄ‡∏à‡∏≠
            try:
                item_label.item_name = item_name
            except Exception:
                pass
            try:
                item_label.setProperty("item_name", item_name)
            except Exception:
                pass
            game_widget.chopping_board_icons.append(item_label)
            print(f"üî™ ‡∏ß‡∏≤‡∏á {item_name} ‡∏ö‡∏ô chopping board")
            placed = True

    # üç≤ ‡∏´‡∏°‡πâ‡∏≠ (pot)
    if not placed and hasattr(game_widget, "pot"):
        pot_geom = game_widget.pot.geometry()
        pot_center = QtCore.QPoint(
            pot_geom.x() + pot_geom.width() // 2,
            pot_geom.y() + pot_geom.height() // 2
        )
        dx = chef_center.x() - pot_center.x()
        dy = chef_center.y() - pot_center.y()
        distance_pot = (dx ** 2 + dy ** 2) ** 0.5

        if distance_pot <= 50:
            if not hasattr(game_widget, "pot_icons"):
                game_widget.pot_icons = []
            if not hasattr(game_widget, "pot_contents"):
                game_widget.pot_contents = []

            game_widget.pot_icons.append(item_label)
            game_widget.pot_contents.append(item_name)
            # ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ö‡∏ô icon ‡∏î‡πâ‡∏ß‡∏¢
            try:
                item_label.item_name = item_name
            except Exception:
                pass
            try:
                item_label.setProperty("item_name", item_name)
            except Exception:
                pass
            print(f"ü•ò ‡∏ß‡∏≤‡∏á {item_name} ‡∏•‡∏á‡∏´‡∏°‡πâ‡∏≠")

            count = game_widget.pot_contents.count(item_name)
            if count == 3:
                print(f"üéâ {item_name.replace('_chopped', '')} ‡∏ï‡πâ‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
                for _ in range(3):
                    game_widget.pot_contents.remove(item_name)
                for icon in game_widget.pot_icons[:3]:
                    icon.deleteLater()
                    game_widget.pot_icons.remove(icon)
            placed = True

    # üåæ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô‡πÄ‡∏•‡∏¢ ‚Üí ‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô
    if not placed:
        print(f"üì¶ ‡∏ß‡∏≤‡∏á {item_name} ‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô")
        item_label.item_name = item_name
        if not hasattr(game_widget, "placed_items"):
            game_widget.placed_items = []
        game_widget.placed_items.append(item_label)

    # üß∫ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠‡πÄ‡∏ä‡∏ü
    if getattr(game_widget, "held_icon", None):
        game_widget.held_icon.deleteLater()
        game_widget.held_icon = None

    game_widget.has_item = False
    game_widget.current_item = None


# ------------------- ‡∏´‡∏±‡πà‡∏ô -------------------
def process_space_action(game_widget):
    """Start a chopping action that takes 3 seconds on the nearest chopping-board icon.

    If a chop is already in progress (game_widget.is_chopping), this call is ignored.
    """
    # ignore if already chopping
    if getattr(game_widget, 'is_chopping', False):
        print("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏´‡∏±‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠")
        return

    # find nearest chopping_board icon to the chef
    if not hasattr(game_widget, 'chopping_board_icons') or not game_widget.chopping_board_icons:
        print("üî™ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏ö‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏±‡πà‡∏ô")
        return

    chef_geom = game_widget.chef.geometry()
    chef_center = QtCore.QPoint(
        chef_geom.x() + chef_geom.width() // 2,
        chef_geom.y() + chef_geom.height() // 2
    )

    nearest = None
    nearest_dist = None
    for icon_label in list(game_widget.chopping_board_icons):
        try:
            icon_geom = icon_label.geometry()
        except Exception:
            continue
        icon_center = QtCore.QPoint(
            icon_geom.x() + icon_geom.width() // 2,
            icon_geom.y() + icon_geom.height() // 2
        )
        dx = chef_center.x() - icon_center.x()
        dy = chef_center.y() - icon_center.y()
        dist = (dx**2 + dy**2) ** 0.5
        if nearest is None or dist < nearest_dist:
            nearest = icon_label
            nearest_dist = dist

    if nearest is None:
        print("üî™ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ö‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á")
        return

    # require reasonable proximity (use 80 px)
    if nearest_dist is None or nearest_dist > 120:
        print(f"üö´ ‡πÑ‡∏Å‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏£‡∏∞‡∏¢‡∏∞ {int(nearest_dist or 999)})")
        return

    # start chopping
    game_widget.is_chopping = True
    target = nearest
    try:
        orig_name = target.property('item_name') or getattr(target, 'item_name', None)
    except Exception:
        orig_name = None

    print(f"üî™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏±‡πà‡∏ô {orig_name} ‚Äî ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

    def _finish_chop():
        try:
            if not getattr(game_widget, 'chopping_board_icons', None):
                return
            # target may have been deleted ‚Äî check
            if target not in game_widget.chopping_board_icons:
                # maybe it was picked up or removed
                return
            name = target.property('item_name') or getattr(target, 'item_name', None)
            if not name:
                return
            # don't append _chopped twice
            if name.endswith('_chopped'):
                print(f"‚ÑπÔ∏è {name} ‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
                return
            chopped_name = f"{name}_chopped"
            pix_path = os.path.join(SOURCE_PATH, "image", f"{chopped_name}_icon.png")
            pix = QtGui.QPixmap(pix_path)
            if not pix.isNull():
                target.setPixmap(pix)
                target.setScaledContents(True)
                target.setProperty('item_name', chopped_name)
                try:
                    target.item_name = chopped_name
                except Exception:
                    pass
                print(f"‚úÖ ‡∏´‡∏±‡πà‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: {chopped_name}")
        except Exception:
            pass
        finally:
            game_widget.is_chopping = False

    # 3 seconds delay
    QtCore.QTimer.singleShot(3000, _finish_chop)

# ------------------- ‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡∏á‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞ ------------------

def try_throw_item_to_trash(game_widget, threshold=80):
    """
    ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ trash_bin ‚Üí ‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠ (‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏±‡∏á)
    """
    if not hasattr(game_widget, "trash_bin"):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ trash_bin ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°")
        return

    chef_geom = game_widget.chef.geometry()
    trash_geom = game_widget.trash_bin.geometry()

    chef_center = QtCore.QPoint(
        chef_geom.x() + chef_geom.width() // 2,
        chef_geom.y() + chef_geom.height() // 2
    )
    trash_center = QtCore.QPoint(
        trash_geom.x() + trash_geom.width() // 2,
        trash_geom.y() + trash_geom.height() // 2
    )

    dx = chef_center.x() - trash_center.x()
    dy = chef_center.y() - trash_center.y()
    distance = (dx**2 + dy**2) ** 0.5

    if distance > threshold:
        print(f"üö´ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏±‡∏á‡∏û‡∏≠ ({int(distance)} px)")
        return

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠ ‚Üí ‡∏ó‡∏¥‡πâ‡∏á
    if getattr(game_widget, "has_item", False):
        item_name = game_widget.current_item
        print(f"üóëÔ∏è ‡∏ó‡∏¥‡πâ‡∏á‡∏Ç‡∏≠‡∏á: {item_name}")
        game_widget.has_item = False
        game_widget.current_item = None

        if getattr(game_widget, "held_icon", None):
            game_widget.held_icon.deleteLater()
            game_widget.held_icon = None
        return

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠ ‚Üí ‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏±‡∏á
    if hasattr(game_widget, "placed_items"):
        for item_label in list(game_widget.placed_items):
            item_geom = item_label.geometry()
            item_center = QtCore.QPoint(
                item_geom.x() + item_geom.width() // 2,
                item_geom.y() + item_geom.height() // 2
            )
            dx = trash_center.x() - item_center.x()
            dy = trash_center.y() - item_center.y()
            dist_item = (dx**2 + dy**2) ** 0.5

            if dist_item <= threshold:
                print(f"üóëÔ∏è ‡πÄ‡∏Å‡πá‡∏ö {item_label.item_name} ‡∏ó‡∏¥‡πâ‡∏á‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞")
                item_label.deleteLater()
                game_widget.placed_items.remove(item_label)

    print("üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

# ============================================================
# üß∫ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö "‡∏à‡∏≤‡∏ô (Plate)"
# ============================================================

def add_item_to_plate(game_widget, item_name):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡∏á‡πÉ‡∏ô‡∏à‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏û"""
    if not hasattr(game_widget, "plate_station"):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ plate_station ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°")
        return

    if not hasattr(game_widget, "plate_items"):
        game_widget.plate_items = []

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏≤‡∏ô‡πÑ‡∏´‡∏° (‡πÉ‡∏ä‡πâ plate_station)
    plate_obj = getattr(game_widget, "plate_station", None)
    if plate_obj is None or not is_near_object(game_widget.chef, plate_obj, mode="center"):
        print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏≤‡∏ô")
        return

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏á‡∏à‡∏≤‡∏ô
    # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏≠‡∏á‡∏ö‡∏ô plate station (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠)
    if not hasattr(game_widget, "station_plate_items"):
        game_widget.station_plate_items = []
    game_widget.station_plate_items.append(item_name)
    print(f"üçΩÔ∏è ‡πÉ‡∏™‡πà {item_name} ‡∏•‡∏á‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà station: {game_widget.station_plate_items}")

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô plate_station
    try:
        update_plate_image(game_widget, target_label=game_widget.plate_station, items=game_widget.station_plate_items)
    except Exception:
        pass


def add_item_to_held_plate(game_widget, item_name):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡∏á‡πÉ‡∏ô‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà (held_plate)"""
    if not getattr(game_widget, "has_plate", False):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≤‡∏ô‡πÉ‡∏ô‡∏°‡∏∑‡∏≠")
        return

    if not hasattr(game_widget, "held_plate") or game_widget.held_plate is None:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ held_plate")
        return

    if not hasattr(game_widget, "plate_items"):
        game_widget.plate_items = []

    game_widget.plate_items.append(item_name)
    print(f"üçΩÔ∏è ‡πÉ‡∏™‡πà {item_name} ‡∏•‡∏á‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà: {game_widget.plate_items}")

    try:
        update_plate_image(game_widget, target_label=game_widget.held_plate, items=game_widget.plate_items)
    except Exception:
        pass


def add_item_to_dropped_plate(game_widget, plate_dict, item_name):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏•‡∏á‡πÉ‡∏ô‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô (plate_dict ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô dropped_plates)"""
    lbl = plate_dict.get("label")
    if lbl is None:
        print("‚ùå plate label ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return

    items = plate_dict.get("items", [])
    items.append(item_name)
    plate_dict["items"] = items
    print(f"üçΩÔ∏è ‡πÉ‡∏™‡πà {item_name} ‡∏•‡∏á‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô: {items}")

    try:
        update_plate_image(game_widget, target_label=lbl, items=items)
    except Exception:
        pass


def update_plate_image(game_widget, target_label=None, items=None):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏ô (‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏°‡∏∑‡∏≠ ‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ô station)"""
    if target_label is None:
        target_label = getattr(game_widget, "plate_station", None)
        if target_label is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ target_label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏ô")
            return

    if items is None:
        items = sorted(getattr(game_widget, "plate_items", []))
    else:
        items = sorted(items)

    combo_name = "_".join(items)
    combo_image_name = f"plate_{combo_name}.png"
    combo_path = os.path.join(SOURCE_PATH, "image", combo_image_name)

    if not os.path.exists(combo_path):
        combo_path = os.path.join(SOURCE_PATH, "image", "plate.png")

    pix = QtGui.QPixmap(combo_path)
    target_label.setPixmap(pix)
    target_label.setScaledContents(True)

def try_pickup_plate(game_widget):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏ü‡∏´‡∏¢‡∏¥‡∏ö‡∏à‡∏≤‡∏ô‡∏à‡∏≤‡∏Å station ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏ô‡∏à‡∏≤‡∏ô)"""
    # üß∫ ‡∏ñ‡πâ‡∏≤‡∏°‡∏∑‡∏≠‡πÄ‡∏ä‡∏ü‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡∏¢
    if getattr(game_widget, "has_item", False):
        print("‡πÄ‡∏ä‡∏ü‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß üß∫")
        return

    # üî∏ ‡∏•‡∏ö‡∏à‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if hasattr(game_widget, "held_plate") and game_widget.held_plate:
        game_widget.held_plate.deleteLater()
        game_widget.held_plate = None

    # üìç ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏ä‡∏ü
    chef_geom = game_widget.chef.geometry()
    chef_center = QtCore.QPoint(
        chef_geom.x() + chef_geom.width() // 2,
        chef_geom.y() + chef_geom.height() // 2
    )

    threshold = getattr(game_widget, "pickup_threshold", 80)

    # 1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏Å‡∏•‡πâ plate_station ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if hasattr(game_widget, "plate_station") and is_near_object(game_widget.chef, game_widget.plate_station, mode="bounds"):
        if getattr(game_widget, "has_plate", False):
            print("‚ö†Ô∏è ‡∏°‡∏µ‡∏à‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return
        # ‚úÖ ‡∏´‡∏¢‡∏¥‡∏ö‡∏à‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å station (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô station ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        game_widget.has_plate = True
        game_widget.current_item = "plate"

        # ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏à‡∏≤‡∏Å station ‡πÑ‡∏õ‡∏¢‡∏±‡∏á plate_items
        game_widget.plate_items = list(getattr(game_widget, "station_plate_items", []))
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ö‡∏ô station
        game_widget.station_plate_items = []
        try:
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡∏ö‡∏ô station ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏ô‡πÄ‡∏õ‡∏•‡πà‡∏≤
            update_plate_image(game_widget, target_label=game_widget.plate_station, items=[])
        except Exception:
            pass

        held_plate = QtWidgets.QLabel(game_widget)
        img_path = os.path.join(SOURCE_PATH, "image", "plate_icon.png")
        if os.path.exists(img_path):
            held_plate.setPixmap(QtGui.QPixmap(img_path))
        held_plate.setScaledContents(True)
        held_plate.resize(64, 64)
        held_plate.setStyleSheet("background: transparent;")
        held_plate.show()

        update_plate_position(game_widget, game_widget.chef, held_plate)
        game_widget.held_plate = held_plate

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á held plate ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        try:
            update_plate_image(game_widget, target_label=held_plate, items=game_widget.plate_items)
        except Exception:
            pass

        print(f"‚úÖ ‡∏´‡∏¢‡∏¥‡∏ö‡∏à‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏°‡∏µ‡∏Ç‡∏≠‡∏á: {game_widget.plate_items}")
        return

    # 2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à dropped_plates (‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô)
    if hasattr(game_widget, "dropped_plates"):
        for plate_dict in list(game_widget.dropped_plates):
            lbl = plate_dict.get("label")
            items_on_plate = plate_dict.get("items", [])

            if lbl is None:
                continue

            # ‡∏´‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ä‡∏ü‡∏Å‡∏±‡∏ö‡∏à‡∏≤‡∏ô
            item_geom = lbl.geometry()
            item_center = QtCore.QPoint(
                item_geom.x() + item_geom.width() // 2,
                item_geom.y() + item_geom.height() // 2
            )
            dx = chef_center.x() - item_center.x()
            dy = chef_center.y() - item_center.y()
            distance = (dx**2 + dy**2) ** 0.5

            # üìè ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡∏¢‡∏¥‡∏ö‡πÑ‡∏î‡πâ
            if distance <= threshold:
                # ‚úÖ ‡∏´‡∏¢‡∏¥‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                game_widget.has_plate = True
                game_widget.current_item = "plate"
                game_widget.plate_items = list(items_on_plate)

                # --- üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á QLabel ‡∏Ç‡∏≠‡∏á‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠ ---
                held_plate = QtWidgets.QLabel(game_widget)
                img_path = os.path.join(SOURCE_PATH, "image", "plate_icon.png")
                if os.path.exists(img_path):
                    held_plate.setPixmap(QtGui.QPixmap(img_path))
                held_plate.setScaledContents(True)
                held_plate.resize(64, 64)
                held_plate.setStyleSheet("background: transparent;")
                held_plate.show()

                # --- ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏´‡∏±‡∏ß‡πÄ‡∏ä‡∏ü ---
                update_plate_position(game_widget, game_widget.chef, held_plate)
                game_widget.held_plate = held_plate

                # --- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ö‡∏ô‡∏à‡∏≤‡∏ô ---
                try:
                    update_plate_image(game_widget, target_label=held_plate, items=game_widget.plate_items)
                except Exception:
                    pass

                # --- ‡∏•‡∏ö‡∏à‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô ---
                lbl.deleteLater()
                try:
                    game_widget.dropped_plates.remove(plate_dict)
                except ValueError:
                    pass

                print(f"‚úÖ ‡∏´‡∏¢‡∏¥‡∏ö‡∏à‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô: {game_widget.plate_items}")
                return

    print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏î ‡πÜ")


def is_near_object(obj_a, obj_b, threshold=80, mode="center"):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ obj_a ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ obj_b ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

    mode:
        - "center" : ‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö station ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
        - "bounds" : ‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏¢‡∏∞‡∏Ç‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á bounding box (‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö trash_bin ‡∏´‡∏£‡∏∑‡∏≠ collision check)
    """
    if not (obj_a and obj_b):
        return False

    if mode == "center":
        # --- ‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á ---
        ax = obj_a.x() + obj_a.width() / 2
        ay = obj_a.y() + obj_a.height() / 2
        bx = obj_b.x() + obj_b.width() / 2
        by = obj_b.y() + obj_b.height() / 2
        distance = ((ax - bx) ** 2 + (ay - by) ** 2) ** 0.5

    elif mode == "bounds":
        # --- ‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏ö‡∏Å‡∏•‡πà‡∏≠‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô trash) ---
        a_rect = QtCore.QRect(obj_a.x(), obj_a.y(), obj_a.width(), obj_a.height())
        b_rect = QtCore.QRect(obj_b.x(), obj_b.y(), obj_b.width(), obj_b.height())

        dx = max(b_rect.left() - a_rect.right(), a_rect.left() - b_rect.right(), 0)
        dy = max(b_rect.top() - a_rect.bottom(), a_rect.top() - b_rect.bottom(), 0)
        distance = (dx**2 + dy**2) ** 0.5

    else:
        raise ValueError("mode ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 'center' ‡∏´‡∏£‡∏∑‡∏≠ 'bounds'")

    return distance < threshold


def update_plate_position(game_widget, chef, plate_label):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏´‡∏±‡∏ß‡πÄ‡∏ä‡∏ü"""
    plate_x = chef.x() + (chef.width() - plate_label.width()) // 2
    plate_y = chef.y() - plate_label.height() + 10  # +10 ‡πÉ‡∏´‡πâ‡∏à‡∏≤‡∏ô‡∏•‡∏≠‡∏¢‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢
    plate_label.move(plate_x, plate_y)

def drop_plate(game_widget):
    """‡∏ß‡∏≤‡∏á‡∏à‡∏≤‡∏ô‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô"""
    if not getattr(game_widget, "has_plate", False):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≤‡∏ô‡πÉ‡∏ô‡∏°‡∏∑‡∏≠")
        return

    chef_x = game_widget.chef.x()
    chef_y = game_widget.chef.y()

    dropped_label = QtWidgets.QLabel(game_widget)
    dropped_label.setGeometry(chef_x + 40, chef_y + 40, 60, 60)
    dropped_label.setStyleSheet("background: transparent;")
    dropped_label.show()

    update_plate_image(game_widget, target_label=dropped_label, items=getattr(game_widget, "plate_items", []))

    if not hasattr(game_widget, "dropped_plates"):
        game_widget.dropped_plates = []
    game_widget.dropped_plates.append({
        "label": dropped_label,
        "items": list(getattr(game_widget, "plate_items", []))
    })

    game_widget.has_plate = False
    game_widget.current_item = None
    game_widget.plate_items = []
    if hasattr(game_widget, "held_plate"):
        game_widget.held_plate.deleteLater()
        game_widget.held_plate = None

    print("üß∫ ‡∏ß‡∏≤‡∏á‡∏à‡∏≤‡∏ô‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß")


def try_serve_plate(game_widget, threshold=80):
    """Serve a plate when near the serve station.

    If holding a plate, serve it. If a dropped plate is near the serve station, serve it.
    Serving increases the parent's score_label by 10 and removes the plate.
    """
    # must have serve_station
    if not hasattr(game_widget, "serve_station"):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ serve_station ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°")
        return False

    chef_geom = game_widget.chef.geometry()
    chef_center = QtCore.QPoint(
        chef_geom.x() + chef_geom.width() // 2,
        chef_geom.y() + chef_geom.height() // 2
    )

    serv_geom = game_widget.serve_station.geometry()
    serv_center = QtCore.QPoint(
        serv_geom.x() + serv_geom.width() // 2,
        serv_geom.y() + serv_geom.height() // 2
    )

    dx = chef_center.x() - serv_center.x()
    dy = chef_center.y() - serv_center.y()
    distance = (dx**2 + dy**2) ** 0.5

    if distance > threshold:
        print("üö´ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∏‡∏î‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏û‡∏≠")
        return False

    parent = game_widget.parent()

    # If holding a plate, serve it
    if getattr(game_widget, "has_plate", False):
        print(f"‚úÖ ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏ô: {getattr(game_widget, 'plate_items', [])}")
        # increase score if available
        if parent is not None and hasattr(parent, "score_label"):
            try:
                text = parent.score_label.text()
                num = int(text.split(":")[-1].strip())
            except Exception:
                num = 0

            # determine if served plate matches current order
            served_items = list(getattr(game_widget, 'plate_items', []))
            served_key = "_".join(sorted([s.replace('_chopped', '_chopped') for s in served_items]))
            try:
                current_order = parent.orders[0]
            except Exception:
                current_order = None

            if current_order and served_key == current_order:
                num += 20
                print("üèÜ ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå! +20")
                # pop order and add a new random one
                try:
                    import random, os
                    files = os.listdir(os.path.join(os.path.dirname(__file__), "source_image", "image"))
                    combos = [f[len("plate_"):-4] for f in files if f.startswith("plate_") and f.lower().endswith('.png')]
                except Exception:
                    combos = []
                if not combos:
                    combos = ["tomato_chopped", "lettuce_chopped", "cucamber_chopped"]
                try:
                    parent.orders.pop(0)
                    parent.orders.append(random.choice(combos))
                    parent._refresh_orders_label()
                except Exception:
                    pass
            else:
                # served but not matching -> smaller reward or none
                num += 0
                print("‚ö†Ô∏è ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå")

            parent.score_label.setText(f"Score: {num}")

        # remove held plate
        if hasattr(game_widget, "held_plate") and game_widget.held_plate:
            game_widget.held_plate.deleteLater()
            game_widget.held_plate = None

        game_widget.has_plate = False
        game_widget.current_item = None
        game_widget.plate_items = []
        return True

    # Otherwise, check dropped plates near serve station
    if hasattr(game_widget, "dropped_plates"):
        for plate_dict in list(game_widget.dropped_plates):
            lbl = plate_dict.get("label")
            if lbl is None:
                continue

            item_geom = lbl.geometry()
            item_center = QtCore.QPoint(
                item_geom.x() + item_geom.width() // 2,
                item_geom.y() + item_geom.height() // 2
            )
            dx = serv_center.x() - item_center.x()
            dy = serv_center.y() - item_center.y()
            dist_item = (dx**2 + dy**2) ** 0.5

            if dist_item <= threshold:
                print(f"‚úÖ ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô: {plate_dict.get('items', [])}")
                # increase score
                if parent is not None and hasattr(parent, "score_label"):
                    try:
                        text = parent.score_label.text()
                        num = int(text.split(":")[-1].strip())
                    except Exception:
                        num = 0

                    # evaluate if plate matches current order
                    items_served = list(plate_dict.get('items', []))
                    served_key = "_".join(sorted(items_served))
                    try:
                        current_order = parent.orders[0]
                    except Exception:
                        current_order = None

                    if current_order and served_key == current_order:
                        num += 20
                        print("üèÜ ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå! +20")
                        try:
                            import random, os
                            files = os.listdir(os.path.join(os.path.dirname(__file__), "source_image", "image"))
                            combos = [f[len("plate_"):-4] for f in files if f.startswith("plate_") and f.lower().endswith('.png')]
                        except Exception:
                            combos = []
                        if not combos:
                            combos = ["tomato_chopped", "lettuce_chopped", "cucamber_chopped"]
                        try:
                            parent.orders.pop(0)
                            parent.orders.append(random.choice(combos))
                            parent._refresh_orders_label()
                        except Exception:
                            pass
                    else:
                        num += 0
                        print("‚ö†Ô∏è ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå")

                    parent.score_label.setText(f"Score: {num}")

                lbl.deleteLater()
                try:
                    game_widget.dropped_plates.remove(plate_dict)
                except Exception:
                    pass
                return True

    print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü")
    return False

def is_near_trash(game_widget, threshold=80):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏ü‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    return: True ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ threshold, False ‡∏ñ‡πâ‡∏≤‡πÑ‡∏Å‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    """
    if not hasattr(game_widget, "trash_bin") or game_widget.trash_bin is None:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ trash_bin ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°")
        return False

    chef_geom = game_widget.chef.geometry()
    trash_geom = game_widget.trash_bin.geometry()

    chef_center = QtCore.QPoint(
        chef_geom.x() + chef_geom.width() // 2,
        chef_geom.y() + chef_geom.height() // 2
    )
    trash_center = QtCore.QPoint(
        trash_geom.x() + trash_geom.width() // 2,
        trash_geom.y() + trash_geom.height() // 2
    )

    dx = chef_center.x() - trash_center.x()
    dy = chef_center.y() - trash_center.y()
    distance = (dx ** 2 + dy ** 2) ** 0.5

    return distance <= threshold

def throw_plate_to_trash(game_widget):
    """‡∏ó‡∏¥‡πâ‡∏á‡∏à‡∏≤‡∏ô‡πÉ‡∏ô‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞"""
    if not getattr(game_widget, "has_plate", False):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≤‡∏ô‡πÉ‡∏ô‡∏°‡∏∑‡∏≠")
        return
    if not hasattr(game_widget, "trash_bin"):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ trash_bin ‡πÉ‡∏ô‡πÄ‡∏Å‡∏°")
        return

    if not is_near_trash(game_widget):
        print("üö´ ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏Å‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞")
        return

    print("üóëÔ∏è ‡∏ó‡∏¥‡πâ‡∏á‡∏à‡∏≤‡∏ô‡∏•‡∏á‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡πÅ‡∏•‡πâ‡∏ß")
    if hasattr(game_widget, "held_plate"):
        game_widget.held_plate.deleteLater()
        game_widget.held_plate = None

    game_widget.has_plate = False
    game_widget.current_item = None
    game_widget.plate_items = []